
greenhouse.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000030  00800100  00000d80  00000e14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800130  00800130  00000e44  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e74  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018ac  00000000  00000000  00000fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a2f  00000000  00000000  00002868  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ae6  00000000  00000000  00003297  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00003d80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005bb  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a95  00000000  00000000  000045e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00005078  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e8       	ldi	r30, 0x80	; 128
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 33       	cpi	r26, 0x30	; 48
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e3       	ldi	r26, 0x30	; 48
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 33       	cpi	r26, 0x36	; 54
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 98 01 	call	0x330	; 0x330 <main>
  9e:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num) //sk
{
	*reg_name ^= (1<<pin_num);   //sk  
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_config_input_nopull>:
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_config_input_nopull+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_config_input_nopull+0xa>
  d0:	20 95       	com	r18
  d2:	82 23       	and	r24, r18
  d4:	80 83       	st	Z, r24
  d6:	80 81       	ld	r24, Z
  d8:	28 23       	and	r18, r24
  da:	20 83       	st	Z, r18
  dc:	08 95       	ret

000000de <GPIO_config_input_pullup>:
  de:	fc 01       	movw	r30, r24
  e0:	80 81       	ld	r24, Z
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	30 e0       	ldi	r19, 0x00	; 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <GPIO_config_input_pullup+0xe>
  e8:	22 0f       	add	r18, r18
  ea:	33 1f       	adc	r19, r19
  ec:	6a 95       	dec	r22
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <GPIO_config_input_pullup+0xa>
  f0:	92 2f       	mov	r25, r18
  f2:	90 95       	com	r25
  f4:	89 23       	and	r24, r25
  f6:	80 83       	st	Z, r24
  f8:	81 81       	ldd	r24, Z+1	; 0x01
  fa:	28 2b       	or	r18, r24
  fc:	21 83       	std	Z+1, r18	; 0x01
  fe:	08 95       	ret

00000100 <GPIO_write_low>:
 100:	fc 01       	movw	r30, r24
 102:	90 81       	ld	r25, Z
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <GPIO_write_low+0xe>
 10a:	22 0f       	add	r18, r18
 10c:	33 1f       	adc	r19, r19
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <GPIO_write_low+0xa>
 112:	20 95       	com	r18
 114:	29 23       	and	r18, r25
 116:	20 83       	st	Z, r18
 118:	08 95       	ret

0000011a <GPIO_write_high>:
 11a:	fc 01       	movw	r30, r24
 11c:	40 81       	ld	r20, Z
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <GPIO_write_high+0xe>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <GPIO_write_high+0xa>
 12c:	24 2b       	or	r18, r20
 12e:	20 83       	st	Z, r18
 130:	08 95       	ret

00000132 <GPIO_read>:
/**********************************************************************
 * Function: GPIO_read()
 **********************************************************************/
uint8_t GPIO_read(volatile uint8_t *reg_name, uint8_t pin_num) //sk
{
    return (((*reg_name) >> pin_num) & 1);
 132:	fc 01       	movw	r30, r24
 134:	80 81       	ld	r24, Z
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <GPIO_read+0xc>
 13a:	95 95       	asr	r25
 13c:	87 95       	ror	r24
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <GPIO_read+0x8>
 142:	81 70       	andi	r24, 0x01	; 1
 144:	08 95       	ret

00000146 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
 146:	85 b1       	in	r24, 0x05	; 5
 148:	82 60       	ori	r24, 0x02	; 2
 14a:	85 b9       	out	0x05, r24	; 5
 14c:	85 e0       	ldi	r24, 0x05	; 5
 14e:	8a 95       	dec	r24
 150:	f1 f7       	brne	.-4      	; 0x14e <toggle_e+0x8>
 152:	00 00       	nop
 154:	85 b1       	in	r24, 0x05	; 5
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	85 b9       	out	0x05, r24	; 5
 15a:	08 95       	ret

0000015c <lcd_write>:
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
 160:	66 23       	and	r22, r22
 162:	21 f0       	breq	.+8      	; 0x16c <lcd_write+0x10>
 164:	85 b1       	in	r24, 0x05	; 5
 166:	81 60       	ori	r24, 0x01	; 1
 168:	85 b9       	out	0x05, r24	; 5
 16a:	03 c0       	rjmp	.+6      	; 0x172 <lcd_write+0x16>
 16c:	85 b1       	in	r24, 0x05	; 5
 16e:	8e 7f       	andi	r24, 0xFE	; 254
 170:	85 b9       	out	0x05, r24	; 5
 172:	8a b1       	in	r24, 0x0a	; 10
 174:	80 61       	ori	r24, 0x10	; 16
 176:	8a b9       	out	0x0a, r24	; 10
 178:	8a b1       	in	r24, 0x0a	; 10
 17a:	80 62       	ori	r24, 0x20	; 32
 17c:	8a b9       	out	0x0a, r24	; 10
 17e:	8a b1       	in	r24, 0x0a	; 10
 180:	80 64       	ori	r24, 0x40	; 64
 182:	8a b9       	out	0x0a, r24	; 10
 184:	8a b1       	in	r24, 0x0a	; 10
 186:	80 68       	ori	r24, 0x80	; 128
 188:	8a b9       	out	0x0a, r24	; 10
 18a:	8b b1       	in	r24, 0x0b	; 11
 18c:	8f 77       	andi	r24, 0x7F	; 127
 18e:	8b b9       	out	0x0b, r24	; 11
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	8f 7b       	andi	r24, 0xBF	; 191
 194:	8b b9       	out	0x0b, r24	; 11
 196:	8b b1       	in	r24, 0x0b	; 11
 198:	8f 7d       	andi	r24, 0xDF	; 223
 19a:	8b b9       	out	0x0b, r24	; 11
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	8f 7e       	andi	r24, 0xEF	; 239
 1a0:	8b b9       	out	0x0b, r24	; 11
 1a2:	cc 23       	and	r28, r28
 1a4:	1c f4       	brge	.+6      	; 0x1ac <lcd_write+0x50>
 1a6:	8b b1       	in	r24, 0x0b	; 11
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	8b b9       	out	0x0b, r24	; 11
 1ac:	c6 ff       	sbrs	r28, 6
 1ae:	03 c0       	rjmp	.+6      	; 0x1b6 <lcd_write+0x5a>
 1b0:	8b b1       	in	r24, 0x0b	; 11
 1b2:	80 64       	ori	r24, 0x40	; 64
 1b4:	8b b9       	out	0x0b, r24	; 11
 1b6:	c5 ff       	sbrs	r28, 5
 1b8:	03 c0       	rjmp	.+6      	; 0x1c0 <lcd_write+0x64>
 1ba:	8b b1       	in	r24, 0x0b	; 11
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	8b b9       	out	0x0b, r24	; 11
 1c0:	c4 ff       	sbrs	r28, 4
 1c2:	03 c0       	rjmp	.+6      	; 0x1ca <lcd_write+0x6e>
 1c4:	8b b1       	in	r24, 0x0b	; 11
 1c6:	80 61       	ori	r24, 0x10	; 16
 1c8:	8b b9       	out	0x0b, r24	; 11
 1ca:	0e 94 a3 00 	call	0x146	; 0x146 <toggle_e>
 1ce:	8b b1       	in	r24, 0x0b	; 11
 1d0:	8f 77       	andi	r24, 0x7F	; 127
 1d2:	8b b9       	out	0x0b, r24	; 11
 1d4:	8b b1       	in	r24, 0x0b	; 11
 1d6:	8f 7b       	andi	r24, 0xBF	; 191
 1d8:	8b b9       	out	0x0b, r24	; 11
 1da:	8b b1       	in	r24, 0x0b	; 11
 1dc:	8f 7d       	andi	r24, 0xDF	; 223
 1de:	8b b9       	out	0x0b, r24	; 11
 1e0:	8b b1       	in	r24, 0x0b	; 11
 1e2:	8f 7e       	andi	r24, 0xEF	; 239
 1e4:	8b b9       	out	0x0b, r24	; 11
 1e6:	c3 ff       	sbrs	r28, 3
 1e8:	03 c0       	rjmp	.+6      	; 0x1f0 <lcd_write+0x94>
 1ea:	8b b1       	in	r24, 0x0b	; 11
 1ec:	80 68       	ori	r24, 0x80	; 128
 1ee:	8b b9       	out	0x0b, r24	; 11
 1f0:	c2 ff       	sbrs	r28, 2
 1f2:	03 c0       	rjmp	.+6      	; 0x1fa <lcd_write+0x9e>
 1f4:	8b b1       	in	r24, 0x0b	; 11
 1f6:	80 64       	ori	r24, 0x40	; 64
 1f8:	8b b9       	out	0x0b, r24	; 11
 1fa:	c1 ff       	sbrs	r28, 1
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <lcd_write+0xa8>
 1fe:	8b b1       	in	r24, 0x0b	; 11
 200:	80 62       	ori	r24, 0x20	; 32
 202:	8b b9       	out	0x0b, r24	; 11
 204:	c0 ff       	sbrs	r28, 0
 206:	03 c0       	rjmp	.+6      	; 0x20e <lcd_write+0xb2>
 208:	8b b1       	in	r24, 0x0b	; 11
 20a:	80 61       	ori	r24, 0x10	; 16
 20c:	8b b9       	out	0x0b, r24	; 11
 20e:	0e 94 a3 00 	call	0x146	; 0x146 <toggle_e>
 212:	8b b1       	in	r24, 0x0b	; 11
 214:	80 61       	ori	r24, 0x10	; 16
 216:	8b b9       	out	0x0b, r24	; 11
 218:	8b b1       	in	r24, 0x0b	; 11
 21a:	80 62       	ori	r24, 0x20	; 32
 21c:	8b b9       	out	0x0b, r24	; 11
 21e:	8b b1       	in	r24, 0x0b	; 11
 220:	80 64       	ori	r24, 0x40	; 64
 222:	8b b9       	out	0x0b, r24	; 11
 224:	8b b1       	in	r24, 0x0b	; 11
 226:	80 68       	ori	r24, 0x80	; 128
 228:	8b b9       	out	0x0b, r24	; 11
 22a:	87 eb       	ldi	r24, 0xB7	; 183
 22c:	9b e0       	ldi	r25, 0x0B	; 11
 22e:	01 97       	sbiw	r24, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_write+0xd2>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_write+0xd8>
 234:	00 00       	nop
 236:	cf 91       	pop	r28
 238:	08 95       	ret

0000023a <lcd_command>:
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_write>
 240:	08 95       	ret

00000242 <lcd_gotoxy>:
 242:	61 11       	cpse	r22, r1
 244:	04 c0       	rjmp	.+8      	; 0x24e <lcd_gotoxy+0xc>
 246:	80 58       	subi	r24, 0x80	; 128
 248:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_command>
 24c:	08 95       	ret
 24e:	80 54       	subi	r24, 0x40	; 64
 250:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_command>
 254:	08 95       	ret

00000256 <lcd_clrscr>:
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_command>
 25c:	08 95       	ret

0000025e <lcd_putc>:
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	0e 94 ae 00 	call	0x15c	; 0x15c <lcd_write>
 264:	08 95       	ret

00000266 <lcd_puts>:
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	fc 01       	movw	r30, r24
 26c:	03 c0       	rjmp	.+6      	; 0x274 <lcd_puts+0xe>
 26e:	0e 94 2f 01 	call	0x25e	; 0x25e <lcd_putc>
 272:	fe 01       	movw	r30, r28
 274:	ef 01       	movw	r28, r30
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	80 81       	ld	r24, Z
 27a:	81 11       	cpse	r24, r1
 27c:	f8 cf       	rjmp	.-16     	; 0x26e <lcd_puts+0x8>
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 284:	cf 93       	push	r28
 286:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 288:	84 b1       	in	r24, 0x04	; 4
 28a:	81 60       	ori	r24, 0x01	; 1
 28c:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 28e:	8a b1       	in	r24, 0x0a	; 10
 290:	80 62       	ori	r24, 0x20	; 32
 292:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 294:	84 b1       	in	r24, 0x04	; 4
 296:	82 60       	ori	r24, 0x02	; 2
 298:	84 b9       	out	0x04, r24	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 29a:	8a b1       	in	r24, 0x0a	; 10
 29c:	80 61       	ori	r24, 0x10	; 16
 29e:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 2a0:	8a b1       	in	r24, 0x0a	; 10
 2a2:	80 62       	ori	r24, 0x20	; 32
 2a4:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 2a6:	8a b1       	in	r24, 0x0a	; 10
 2a8:	80 64       	ori	r24, 0x40	; 64
 2aa:	8a b9       	out	0x0a, r24	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 2ac:	8a b1       	in	r24, 0x0a	; 10
 2ae:	80 68       	ori	r24, 0x80	; 128
 2b0:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2b2:	8f ef       	ldi	r24, 0xFF	; 255
 2b4:	99 ef       	ldi	r25, 0xF9	; 249
 2b6:	01 97       	sbiw	r24, 0x01	; 1
 2b8:	f1 f7       	brne	.-4      	; 0x2b6 <lcd_init+0x32>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <lcd_init+0x38>
 2bc:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
 2be:	8b b1       	in	r24, 0x0b	; 11
 2c0:	80 62       	ori	r24, 0x20	; 32
 2c2:	8b b9       	out	0x0b, r24	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
 2c4:	8b b1       	in	r24, 0x0b	; 11
 2c6:	80 61       	ori	r24, 0x10	; 16
 2c8:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 2ca:	0e 94 a3 00 	call	0x146	; 0x146 <toggle_e>
 2ce:	8f e1       	ldi	r24, 0x1F	; 31
 2d0:	9e e4       	ldi	r25, 0x4E	; 78
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <lcd_init+0x4e>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <lcd_init+0x54>
 2d8:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
 2da:	0e 94 a3 00 	call	0x146	; 0x146 <toggle_e>
 2de:	8f ef       	ldi	r24, 0xFF	; 255
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <lcd_init+0x5e>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <lcd_init+0x64>
 2e8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
 2ea:	0e 94 a3 00 	call	0x146	; 0x146 <toggle_e>
 2ee:	8f ef       	ldi	r24, 0xFF	; 255
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	01 97       	sbiw	r24, 0x01	; 1
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_init+0x6e>
 2f6:	00 c0       	rjmp	.+0      	; 0x2f8 <lcd_init+0x74>
 2f8:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
 2fa:	8b b1       	in	r24, 0x0b	; 11
 2fc:	8f 7e       	andi	r24, 0xEF	; 239
 2fe:	8b b9       	out	0x0b, r24	; 11
    lcd_e_toggle();
 300:	0e 94 a3 00 	call	0x146	; 0x146 <toggle_e>
 304:	8f ef       	ldi	r24, 0xFF	; 255
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	01 97       	sbiw	r24, 0x01	; 1
 30a:	f1 f7       	brne	.-4      	; 0x308 <lcd_init+0x84>
 30c:	00 c0       	rjmp	.+0      	; 0x30e <lcd_init+0x8a>
 30e:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
 310:	88 e2       	ldi	r24, 0x28	; 40
 312:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_command>
    lcd_clrscr();                  /* display clear                */
 31c:	0e 94 2b 01 	call	0x256	; 0x256 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
 320:	86 e0       	ldi	r24, 0x06	; 6
 322:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
 326:	8c 2f       	mov	r24, r28
 328:	0e 94 1d 01 	call	0x23a	; 0x23a <lcd_command>
}/* lcd_init */
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <main>:
uint8_t temperature_set = 25; // default value of user defined temperature to be kept
uint16_t timing = 0;              // timer
float temperature = 0;        // measured temperature
/* function definitions */
int main(void)
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	00 d0       	rcall	.+0      	; 0x336 <main+0x6>
 336:	00 d0       	rcall	.+0      	; 0x338 <main+0x8>
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
    //DDRB = DDRB | (1<<PB3);     // output - valve2
    //PORTB = PORTB & ~(1<<PB3);  // valve2 closed
    //uint8_t temperature_set = 25; // default value of user defined temperature to be kept
    //uint16_t timing = 0;              // timer
	//float temperature = 0;         // measured temperature
    GPIO_config_output(&DDRC, HEAT);
 33c:	61 e0       	ldi	r22, 0x01	; 1
 33e:	87 e2       	ldi	r24, 0x27	; 39
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC, HEAT);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	88 e2       	ldi	r24, 0x28	; 40
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
    GPIO_config_output(&DDRC, FAN);
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	87 e2       	ldi	r24, 0x27	; 39
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTC, FAN);
 35a:	62 e0       	ldi	r22, 0x02	; 2
 35c:	88 e2       	ldi	r24, 0x28	; 40
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
    GPIO_config_output(&DDRB, VALVE1);
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	84 e2       	ldi	r24, 0x24	; 36
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, VALVE1);
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	85 e2       	ldi	r24, 0x25	; 37
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
    GPIO_config_output(&DDRB, VALVE2);
 378:	63 e0       	ldi	r22, 0x03	; 3
 37a:	84 e2       	ldi	r24, 0x24	; 36
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_low(&PORTB, VALVE2);
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	85 e2       	ldi	r24, 0x25	; 37
 386:	90 e0       	ldi	r25, 0x00	; 0
 388:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
    GPIO_config_input_nopull(&PORTB, MOIST1); // external pull-up resistor will be added
 38c:	64 e0       	ldi	r22, 0x04	; 4
 38e:	85 e2       	ldi	r24, 0x25	; 37
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
    GPIO_config_input_nopull(&PORTB, MOIST2); // external pull-up resistor will be added
 396:	65 e0       	ldi	r22, 0x05	; 5
 398:	85 e2       	ldi	r24, 0x25	; 37
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_config_input_nopull>
    GPIO_config_input_pullup(&PORTD, BUTTON); // temperature setting
 3a0:	62 e0       	ldi	r22, 0x02	; 2
 3a2:	8b e2       	ldi	r24, 0x2B	; 43
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	0e 94 6f 00 	call	0xde	; 0xde <GPIO_config_input_pullup>
    
    lcd_init(LCD_DISP_ON);             // LCD initialization
 3aa:	8c e0       	ldi	r24, 0x0C	; 12
 3ac:	0e 94 42 01 	call	0x284	; 0x284 <lcd_init>
    lcd_gotoxy(0, 0);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 e0       	ldi	r24, 0x00	; 0
 3b4:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
    lcd_puts("SET 25,0C M1 M2 ");
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	91 e0       	ldi	r25, 0x01	; 1
 3bc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
	lcd_gotoxy(0, 1);
 3c0:	61 e0       	ldi	r22, 0x01	; 1
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
    lcd_puts("MEA --,-C -- -- ");
 3c8:	82 e1       	ldi	r24, 0x12	; 18
 3ca:	91 e0       	ldi	r25, 0x01	; 1
 3cc:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
    
    TIM1_overflow_1s(); //set the overflow prescaler to 4 s
 3d0:	e1 e8       	ldi	r30, 0x81	; 129
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	8c 7f       	andi	r24, 0xFC	; 252
 3d8:	80 83       	st	Z, r24
 3da:	80 81       	ld	r24, Z
 3dc:	84 60       	ori	r24, 0x04	; 4
 3de:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable(); //enable interrupt
 3e0:	ef e6       	ldi	r30, 0x6F	; 111
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	81 60       	ori	r24, 0x01	; 1
 3e8:	80 83       	st	Z, r24
    sei(); // enable interrupts at all
 3ea:	78 94       	sei

    ADMUX |= (1<<REFS0);         // reference set to internal 1.1V
 3ec:	ec e7       	ldi	r30, 0x7C	; 124
 3ee:	f0 e0       	ldi	r31, 0x00	; 0
 3f0:	80 81       	ld	r24, Z
 3f2:	80 64       	ori	r24, 0x40	; 64
 3f4:	80 83       	st	Z, r24
    ADMUX |= (1<<REFS1);
 3f6:	80 81       	ld	r24, Z
 3f8:	80 68       	ori	r24, 0x80	; 128
 3fa:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<MUX3);  // input channel set to PC0
 3fc:	80 81       	ld	r24, Z
 3fe:	87 7f       	andi	r24, 0xF7	; 247
 400:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<MUX2);
 402:	80 81       	ld	r24, Z
 404:	8b 7f       	andi	r24, 0xFB	; 251
 406:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<MUX1);
 408:	80 81       	ld	r24, Z
 40a:	8d 7f       	andi	r24, 0xFD	; 253
 40c:	80 83       	st	Z, r24
    ADMUX = ADMUX &~ (1<<MUX0);
 40e:	80 81       	ld	r24, Z
 410:	8e 7f       	andi	r24, 0xFE	; 254
 412:	80 83       	st	Z, r24
    ADCSRA = ADCSRA | (1<<ADEN); // enable ADC module
 414:	ea e7       	ldi	r30, 0x7A	; 122
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	80 81       	ld	r24, Z
 41a:	80 68       	ori	r24, 0x80	; 128
 41c:	80 83       	st	Z, r24
    ADCSRA |= (1<<ADIE);         // enable conversion complete interrupt
 41e:	80 81       	ld	r24, Z
 420:	88 60       	ori	r24, 0x08	; 8
 422:	80 83       	st	Z, r24
    // Set clock prescaler to 128
    ADCSRA = ADCSRA | (1<<ADPS2);
 424:	80 81       	ld	r24, Z
 426:	84 60       	ori	r24, 0x04	; 4
 428:	80 83       	st	Z, r24
    ADCSRA = ADCSRA | (1<<ADPS1);
 42a:	80 81       	ld	r24, Z
 42c:	82 60       	ori	r24, 0x02	; 2
 42e:	80 83       	st	Z, r24
    ADCSRA = ADCSRA | (1<<ADPS0);
 430:	80 81       	ld	r24, Z
 432:	81 60       	ori	r24, 0x01	; 1
 434:	80 83       	st	Z, r24
    
    // Infinite loop
    while (1)
    {
		    if ((GPIO_read(&PIND, BUTTON)) == 0)
 436:	62 e0       	ldi	r22, 0x02	; 2
 438:	89 e2       	ldi	r24, 0x29	; 41
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_read>
 440:	81 11       	cpse	r24, r1
 442:	f9 cf       	rjmp	.-14     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
		    {
			    temperature_set = temperature_set + 1;
 444:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 448:	8f 5f       	subi	r24, 0xFF	; 255
 44a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			    lcd_gotoxy(4, 0);
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	84 e0       	ldi	r24, 0x04	; 4
 452:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
				char temperature_set_itoa[2] = "--";
 456:	8d e2       	ldi	r24, 0x2D	; 45
 458:	9d e2       	ldi	r25, 0x2D	; 45
 45a:	9c 83       	std	Y+4, r25	; 0x04
 45c:	8b 83       	std	Y+3, r24	; 0x03
				itoa(temperature_set, temperature_set_itoa, 10);
 45e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 462:	4a e0       	ldi	r20, 0x0A	; 10
 464:	be 01       	movw	r22, r28
 466:	6d 5f       	subi	r22, 0xFD	; 253
 468:	7f 4f       	sbci	r23, 0xFF	; 255
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	0e 94 89 06 	call	0xd12	; 0xd12 <__itoa_ncheck>
			    lcd_puts(temperature_set_itoa);
 470:	ce 01       	movw	r24, r28
 472:	03 96       	adiw	r24, 0x03	; 3
 474:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
			    if (temperature_set == 41)
 478:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 47c:	89 32       	cpi	r24, 0x29	; 41
 47e:	d9 f6       	brne	.-74     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			    {
				    temperature_set = 10;
 480:	8a e0       	ldi	r24, 0x0A	; 10
 482:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
				    lcd_gotoxy(4, 0);
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	84 e0       	ldi	r24, 0x04	; 4
 48a:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
					char temperature_set_itoa[2] = "--";
 48e:	8d e2       	ldi	r24, 0x2D	; 45
 490:	9d e2       	ldi	r25, 0x2D	; 45
 492:	9a 83       	std	Y+2, r25	; 0x02
 494:	89 83       	std	Y+1, r24	; 0x01
					itoa(temperature_set, temperature_set_itoa, 10);
 496:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 49a:	4a e0       	ldi	r20, 0x0A	; 10
 49c:	be 01       	movw	r22, r28
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	0e 94 89 06 	call	0xd12	; 0xd12 <__itoa_ncheck>
				    lcd_puts(temperature_set_itoa);
 4a8:	ce 01       	movw	r24, r28
 4aa:	01 96       	adiw	r24, 0x01	; 1
 4ac:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
 4b0:	c2 cf       	rjmp	.-124    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>

000004b2 <__vector_13>:
    // This will be never reached
    return 0;
}

ISR(TIMER1_OVF_vect)
{	timing = timing + 1;
 4b2:	1f 92       	push	r1
 4b4:	0f 92       	push	r0
 4b6:	0f b6       	in	r0, 0x3f	; 63
 4b8:	0f 92       	push	r0
 4ba:	11 24       	eor	r1, r1
 4bc:	2f 93       	push	r18
 4be:	3f 93       	push	r19
 4c0:	4f 93       	push	r20
 4c2:	5f 93       	push	r21
 4c4:	6f 93       	push	r22
 4c6:	7f 93       	push	r23
 4c8:	8f 93       	push	r24
 4ca:	9f 93       	push	r25
 4cc:	af 93       	push	r26
 4ce:	bf 93       	push	r27
 4d0:	ef 93       	push	r30
 4d2:	ff 93       	push	r31
 4d4:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timing>
 4d8:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timing+0x1>
 4dc:	01 96       	adiw	r24, 0x01	; 1
 4de:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <timing+0x1>
 4e2:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <timing>
	if ((GPIO_read(&PINB, MOIST1)) == 1)
 4e6:	64 e0       	ldi	r22, 0x04	; 4
 4e8:	83 e2       	ldi	r24, 0x23	; 35
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_read>
 4f0:	81 30       	cpi	r24, 0x01	; 1
 4f2:	49 f4       	brne	.+18     	; 0x506 <__vector_13+0x54>
	{
		lcd_gotoxy(10, 1);
 4f4:	61 e0       	ldi	r22, 0x01	; 1
 4f6:	8a e0       	ldi	r24, 0x0A	; 10
 4f8:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
		lcd_puts("LO");
 4fc:	83 e2       	ldi	r24, 0x23	; 35
 4fe:	91 e0       	ldi	r25, 0x01	; 1
 500:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
 504:	0f c0       	rjmp	.+30     	; 0x524 <__vector_13+0x72>
	}
	else if ((GPIO_read(&PINB, MOIST1)) == 0)
 506:	64 e0       	ldi	r22, 0x04	; 4
 508:	83 e2       	ldi	r24, 0x23	; 35
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_read>
 510:	81 11       	cpse	r24, r1
 512:	08 c0       	rjmp	.+16     	; 0x524 <__vector_13+0x72>
	{
		lcd_gotoxy(10, 1);
 514:	61 e0       	ldi	r22, 0x01	; 1
 516:	8a e0       	ldi	r24, 0x0A	; 10
 518:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
		lcd_puts("HI");
 51c:	86 e2       	ldi	r24, 0x26	; 38
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
	}
	if ((GPIO_read(&PINB, MOIST2)) == 1)
 524:	65 e0       	ldi	r22, 0x05	; 5
 526:	83 e2       	ldi	r24, 0x23	; 35
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_read>
 52e:	81 30       	cpi	r24, 0x01	; 1
 530:	49 f4       	brne	.+18     	; 0x544 <__vector_13+0x92>
	{
		lcd_gotoxy(13, 1);
 532:	61 e0       	ldi	r22, 0x01	; 1
 534:	8d e0       	ldi	r24, 0x0D	; 13
 536:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
		lcd_puts("LO");
 53a:	83 e2       	ldi	r24, 0x23	; 35
 53c:	91 e0       	ldi	r25, 0x01	; 1
 53e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
 542:	0f c0       	rjmp	.+30     	; 0x562 <__vector_13+0xb0>
	}
	else if ((GPIO_read(&PINB, MOIST2)) == 0)
 544:	65 e0       	ldi	r22, 0x05	; 5
 546:	83 e2       	ldi	r24, 0x23	; 35
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_read>
 54e:	81 11       	cpse	r24, r1
 550:	08 c0       	rjmp	.+16     	; 0x562 <__vector_13+0xb0>
	{
		lcd_gotoxy(13, 1);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	8d e0       	ldi	r24, 0x0D	; 13
 556:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
		lcd_puts("HI");
 55a:	86 e2       	ldi	r24, 0x26	; 38
 55c:	91 e0       	ldi	r25, 0x01	; 1
 55e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
	}
	ADCSRA = ADCSRA | (1<<ADSC); //start conversion
 562:	ea e7       	ldi	r30, 0x7A	; 122
 564:	f0 e0       	ldi	r31, 0x00	; 0
 566:	80 81       	ld	r24, Z
 568:	80 64       	ori	r24, 0x40	; 64
 56a:	80 83       	st	Z, r24
 	if (timing == 5) // 10 min interval (150)
 56c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timing>
 570:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timing+0x1>
 574:	05 97       	sbiw	r24, 0x05	; 5
 576:	09 f0       	breq	.+2      	; 0x57a <__vector_13+0xc8>
 578:	54 c0       	rjmp	.+168    	; 0x622 <__vector_13+0x170>
	{
		if (temperature <= (temperature_set - 1)) {
 57a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 57e:	70 e0       	ldi	r23, 0x00	; 0
 580:	61 50       	subi	r22, 0x01	; 1
 582:	71 09       	sbc	r23, r1
 584:	07 2e       	mov	r0, r23
 586:	00 0c       	add	r0, r0
 588:	88 0b       	sbc	r24, r24
 58a:	99 0b       	sbc	r25, r25
 58c:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__floatsisf>
 590:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 594:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
 598:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <__data_end+0x2>
 59c:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <__data_end+0x3>
 5a0:	0e 94 17 06 	call	0xc2e	; 0xc2e <__gesf2>
 5a4:	88 23       	and	r24, r24
 5a6:	2c f0       	brlt	.+10     	; 0x5b2 <__vector_13+0x100>
		//PORTB |= (1<<PB0); // turn on the heating
		GPIO_write_high(&PORTC, HEAT);
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	88 e2       	ldi	r24, 0x28	; 40
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 8d 00 	call	0x11a	; 0x11a <GPIO_write_high>
		}
		if (temperature >= (temperature_set + 1)) {
 5b2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5b6:	70 e0       	ldi	r23, 0x00	; 0
 5b8:	6f 5f       	subi	r22, 0xFF	; 255
 5ba:	7f 4f       	sbci	r23, 0xFF	; 255
 5bc:	07 2e       	mov	r0, r23
 5be:	00 0c       	add	r0, r0
 5c0:	88 0b       	sbc	r24, r24
 5c2:	99 0b       	sbc	r25, r25
 5c4:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__floatsisf>
 5c8:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <__data_end>
 5cc:	30 91 31 01 	lds	r19, 0x0131	; 0x800131 <__data_end+0x1>
 5d0:	40 91 32 01 	lds	r20, 0x0132	; 0x800132 <__data_end+0x2>
 5d4:	50 91 33 01 	lds	r21, 0x0133	; 0x800133 <__data_end+0x3>
 5d8:	0e 94 60 04 	call	0x8c0	; 0x8c0 <__cmpsf2>
 5dc:	18 16       	cp	r1, r24
 5de:	2c f0       	brlt	.+10     	; 0x5ea <__vector_13+0x138>
			//PORTB |= (1<<PB1); // turn on the fan
			GPIO_write_high(&PORTC, FAN);
 5e0:	62 e0       	ldi	r22, 0x02	; 2
 5e2:	88 e2       	ldi	r24, 0x28	; 40
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 8d 00 	call	0x11a	; 0x11a <GPIO_write_high>
		}
		if ((GPIO_read(&PINB, MOIST1)) == 1) {
 5ea:	64 e0       	ldi	r22, 0x04	; 4
 5ec:	83 e2       	ldi	r24, 0x23	; 35
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_read>
 5f4:	81 30       	cpi	r24, 0x01	; 1
 5f6:	29 f4       	brne	.+10     	; 0x602 <__vector_13+0x150>
			////PORTB |= (1<<PB2); // open valve1
			GPIO_write_high(&PORTB, VALVE1);
 5f8:	62 e0       	ldi	r22, 0x02	; 2
 5fa:	85 e2       	ldi	r24, 0x25	; 37
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	0e 94 8d 00 	call	0x11a	; 0x11a <GPIO_write_high>
		}
		if ((GPIO_read(&PINB, MOIST2)) == 1) {
 602:	65 e0       	ldi	r22, 0x05	; 5
 604:	83 e2       	ldi	r24, 0x23	; 35
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	0e 94 99 00 	call	0x132	; 0x132 <GPIO_read>
 60c:	81 30       	cpi	r24, 0x01	; 1
 60e:	29 f4       	brne	.+10     	; 0x61a <__vector_13+0x168>
			////PORTB |= (1<<PB3); // open valve2
			GPIO_write_high(&PORTB, VALVE1);
 610:	62 e0       	ldi	r22, 0x02	; 2
 612:	85 e2       	ldi	r24, 0x25	; 37
 614:	90 e0       	ldi	r25, 0x00	; 0
 616:	0e 94 8d 00 	call	0x11a	; 0x11a <GPIO_write_high>
		}
		timing = 0; //reset
 61a:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <timing+0x1>
 61e:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <timing>
	}
	if (timing == 3) // 5 min (75)
 622:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timing>
 626:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timing+0x1>
 62a:	03 97       	sbiw	r24, 0x03	; 3
 62c:	29 f4       	brne	.+10     	; 0x638 <__vector_13+0x186>
	{
		////PORTB = PORTB & ~(1<<PINB0); //heating turned off
		////PORTC = PORTC & ~(1<<PINC1); //heating turned off
		GPIO_write_low(&PORTC, HEAT);
 62e:	61 e0       	ldi	r22, 0x01	; 1
 630:	88 e2       	ldi	r24, 0x28	; 40
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
	}
	if (timing == 3) // 3 min (45)
 638:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timing>
 63c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timing+0x1>
 640:	03 97       	sbiw	r24, 0x03	; 3
 642:	29 f4       	brne	.+10     	; 0x64e <__vector_13+0x19c>
	{
		////PORTB = PORTB & ~(1<<PINB1); //fan turned off
		////PORTC = PORTC & ~(1<<PINC2); //fan turned off
		GPIO_write_low(&PORTC, FAN);
 644:	62 e0       	ldi	r22, 0x02	; 2
 646:	88 e2       	ldi	r24, 0x28	; 40
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
	}
	if (timing == 3) // 1 min (15)
 64e:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <timing>
 652:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <timing+0x1>
 656:	03 97       	sbiw	r24, 0x03	; 3
 658:	51 f4       	brne	.+20     	; 0x66e <__vector_13+0x1bc>
	{
		////PORTB = PORTB & ~(1<<PINB2); //valve1 closed
		////PORTB = PORTB & ~(1<<PINB3); //valve2 closed
		GPIO_write_low(&PORTB, VALVE1);
 65a:	62 e0       	ldi	r22, 0x02	; 2
 65c:	85 e2       	ldi	r24, 0x25	; 37
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
		GPIO_write_low(&PORTB, VALVE2);
 664:	63 e0       	ldi	r22, 0x03	; 3
 666:	85 e2       	ldi	r24, 0x25	; 37
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 80 00 	call	0x100	; 0x100 <GPIO_write_low>
	}
}
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	bf 91       	pop	r27
 674:	af 91       	pop	r26
 676:	9f 91       	pop	r25
 678:	8f 91       	pop	r24
 67a:	7f 91       	pop	r23
 67c:	6f 91       	pop	r22
 67e:	5f 91       	pop	r21
 680:	4f 91       	pop	r20
 682:	3f 91       	pop	r19
 684:	2f 91       	pop	r18
 686:	0f 90       	pop	r0
 688:	0f be       	out	0x3f, r0	; 63
 68a:	0f 90       	pop	r0
 68c:	1f 90       	pop	r1
 68e:	18 95       	reti

00000690 <__vector_21>:

ISR(ADC_vect)
{
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	cf 92       	push	r12
 69c:	df 92       	push	r13
 69e:	ef 92       	push	r14
 6a0:	ff 92       	push	r15
 6a2:	2f 93       	push	r18
 6a4:	3f 93       	push	r19
 6a6:	4f 93       	push	r20
 6a8:	5f 93       	push	r21
 6aa:	6f 93       	push	r22
 6ac:	7f 93       	push	r23
 6ae:	8f 93       	push	r24
 6b0:	9f 93       	push	r25
 6b2:	af 93       	push	r26
 6b4:	bf 93       	push	r27
 6b6:	ef 93       	push	r30
 6b8:	ff 93       	push	r31
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	00 d0       	rcall	.+0      	; 0x6c0 <__vector_21+0x30>
 6c0:	1f 92       	push	r1
 6c2:	cd b7       	in	r28, 0x3d	; 61
 6c4:	de b7       	in	r29, 0x3e	; 62
	//float temperature = 0;
	char temperature_string [2] = "--";
 6c6:	8d e2       	ldi	r24, 0x2D	; 45
 6c8:	9d e2       	ldi	r25, 0x2D	; 45
 6ca:	9a 83       	std	Y+2, r25	; 0x02
 6cc:	89 83       	std	Y+1, r24	; 0x01
	char temperature_dp_string [1] = "-";
 6ce:	8d e2       	ldi	r24, 0x2D	; 45
 6d0:	8b 83       	std	Y+3, r24	; 0x03
	//uint16_t AD = 480;
	temperature = (((ADC*(1.1/1.023))-424)/6.25); //calculates the temperature from the output voltage
 6d2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
 6d6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
 6da:	80 e0       	ldi	r24, 0x00	; 0
 6dc:	90 e0       	ldi	r25, 0x00	; 0
 6de:	0e 94 0d 05 	call	0xa1a	; 0xa1a <__floatunsisf>
 6e2:	29 e6       	ldi	r18, 0x69	; 105
 6e4:	32 ea       	ldi	r19, 0xA2	; 162
 6e6:	49 e8       	ldi	r20, 0x89	; 137
 6e8:	5f e3       	ldi	r21, 0x3F	; 63
 6ea:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	30 e0       	ldi	r19, 0x00	; 0
 6f2:	44 ed       	ldi	r20, 0xD4	; 212
 6f4:	53 e4       	ldi	r21, 0x43	; 67
 6f6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__subsf3>
 6fa:	20 e0       	ldi	r18, 0x00	; 0
 6fc:	30 e0       	ldi	r19, 0x00	; 0
 6fe:	48 ec       	ldi	r20, 0xC8	; 200
 700:	50 e4       	ldi	r21, 0x40	; 64
 702:	0e 94 65 04 	call	0x8ca	; 0x8ca <__divsf3>
 706:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <__data_end>
 70a:	70 93 31 01 	sts	0x0131, r23	; 0x800131 <__data_end+0x1>
 70e:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <__data_end+0x2>
 712:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <__data_end+0x3>
	itoa(temperature, temperature_string, 10); //converts the integer part into a string
 716:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fixsfsi>
 71a:	dc 01       	movw	r26, r24
 71c:	cb 01       	movw	r24, r22
 71e:	4a e0       	ldi	r20, 0x0A	; 10
 720:	be 01       	movw	r22, r28
 722:	6f 5f       	subi	r22, 0xFF	; 255
 724:	7f 4f       	sbci	r23, 0xFF	; 255
 726:	0e 94 89 06 	call	0xd12	; 0xd12 <__itoa_ncheck>
	itoa((floor(10*(temperature - (floor(temperature))))), temperature_dp_string, 10); //converts the first decimal point into a string
 72a:	c0 90 30 01 	lds	r12, 0x0130	; 0x800130 <__data_end>
 72e:	d0 90 31 01 	lds	r13, 0x0131	; 0x800131 <__data_end+0x1>
 732:	e0 90 32 01 	lds	r14, 0x0132	; 0x800132 <__data_end+0x2>
 736:	f0 90 33 01 	lds	r15, 0x0133	; 0x800133 <__data_end+0x3>
 73a:	c7 01       	movw	r24, r14
 73c:	b6 01       	movw	r22, r12
 73e:	0e 94 4a 05 	call	0xa94	; 0xa94 <floor>
 742:	9b 01       	movw	r18, r22
 744:	ac 01       	movw	r20, r24
 746:	c7 01       	movw	r24, r14
 748:	b6 01       	movw	r22, r12
 74a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <__subsf3>
 74e:	20 e0       	ldi	r18, 0x00	; 0
 750:	30 e0       	ldi	r19, 0x00	; 0
 752:	40 e2       	ldi	r20, 0x20	; 32
 754:	51 e4       	ldi	r21, 0x41	; 65
 756:	0e 94 1c 06 	call	0xc38	; 0xc38 <__mulsf3>
 75a:	0e 94 4a 05 	call	0xa94	; 0xa94 <floor>
 75e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fixsfsi>
 762:	dc 01       	movw	r26, r24
 764:	cb 01       	movw	r24, r22
 766:	4a e0       	ldi	r20, 0x0A	; 10
 768:	be 01       	movw	r22, r28
 76a:	6d 5f       	subi	r22, 0xFD	; 253
 76c:	7f 4f       	sbci	r23, 0xFF	; 255
 76e:	0e 94 89 06 	call	0xd12	; 0xd12 <__itoa_ncheck>
	//temperature_string = gcvt (temperature, 3, buf); //cuts the excessive decimal points and converts the resultant number into a string
	lcd_gotoxy(4, 1);
 772:	61 e0       	ldi	r22, 0x01	; 1
 774:	84 e0       	ldi	r24, 0x04	; 4
 776:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
	lcd_puts("--,-");
 77a:	89 e2       	ldi	r24, 0x29	; 41
 77c:	91 e0       	ldi	r25, 0x01	; 1
 77e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
	lcd_gotoxy(4, 1);
 782:	61 e0       	ldi	r22, 0x01	; 1
 784:	84 e0       	ldi	r24, 0x04	; 4
 786:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
	lcd_puts(temperature_string);
 78a:	ce 01       	movw	r24, r28
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
	lcd_gotoxy(6, 1);
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	86 e0       	ldi	r24, 0x06	; 6
 796:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
	lcd_puts(",");
 79a:	8e e2       	ldi	r24, 0x2E	; 46
 79c:	91 e0       	ldi	r25, 0x01	; 1
 79e:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
	lcd_gotoxy(7, 1);
 7a2:	61 e0       	ldi	r22, 0x01	; 1
 7a4:	87 e0       	ldi	r24, 0x07	; 7
 7a6:	0e 94 21 01 	call	0x242	; 0x242 <lcd_gotoxy>
	lcd_puts(temperature_dp_string);
 7aa:	ce 01       	movw	r24, r28
 7ac:	03 96       	adiw	r24, 0x03	; 3
 7ae:	0e 94 33 01 	call	0x266	; 0x266 <lcd_puts>
	//char x [1] = "0";
	//itoa(ADC, x, 10);
	//lcd_gotoxy(4, 1);
	//lcd_puts(x);
}
 7b2:	0f 90       	pop	r0
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	df 91       	pop	r29
 7ba:	cf 91       	pop	r28
 7bc:	ff 91       	pop	r31
 7be:	ef 91       	pop	r30
 7c0:	bf 91       	pop	r27
 7c2:	af 91       	pop	r26
 7c4:	9f 91       	pop	r25
 7c6:	8f 91       	pop	r24
 7c8:	7f 91       	pop	r23
 7ca:	6f 91       	pop	r22
 7cc:	5f 91       	pop	r21
 7ce:	4f 91       	pop	r20
 7d0:	3f 91       	pop	r19
 7d2:	2f 91       	pop	r18
 7d4:	ff 90       	pop	r15
 7d6:	ef 90       	pop	r14
 7d8:	df 90       	pop	r13
 7da:	cf 90       	pop	r12
 7dc:	0f 90       	pop	r0
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	0f 90       	pop	r0
 7e2:	1f 90       	pop	r1
 7e4:	18 95       	reti

000007e6 <__subsf3>:
 7e6:	50 58       	subi	r21, 0x80	; 128

000007e8 <__addsf3>:
 7e8:	bb 27       	eor	r27, r27
 7ea:	aa 27       	eor	r26, r26
 7ec:	0e 94 0b 04 	call	0x816	; 0x816 <__addsf3x>
 7f0:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 7f4:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 7f8:	38 f0       	brcs	.+14     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 7fa:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 7fe:	20 f0       	brcs	.+8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 800:	39 f4       	brne	.+14     	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 802:	9f 3f       	cpi	r25, 0xFF	; 255
 804:	19 f4       	brne	.+6      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 806:	26 f4       	brtc	.+8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 808:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>
 80c:	0e f4       	brtc	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	e0 95       	com	r30
 810:	e7 fb       	bst	r30, 7
 812:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>

00000816 <__addsf3x>:
 816:	e9 2f       	mov	r30, r25
 818:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 81c:	58 f3       	brcs	.-42     	; 0x7f4 <__addsf3+0xc>
 81e:	ba 17       	cp	r27, r26
 820:	62 07       	cpc	r22, r18
 822:	73 07       	cpc	r23, r19
 824:	84 07       	cpc	r24, r20
 826:	95 07       	cpc	r25, r21
 828:	20 f0       	brcs	.+8      	; 0x832 <__addsf3x+0x1c>
 82a:	79 f4       	brne	.+30     	; 0x84a <__addsf3x+0x34>
 82c:	a6 f5       	brtc	.+104    	; 0x896 <__addsf3x+0x80>
 82e:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_zero>
 832:	0e f4       	brtc	.+2      	; 0x836 <__addsf3x+0x20>
 834:	e0 95       	com	r30
 836:	0b 2e       	mov	r0, r27
 838:	ba 2f       	mov	r27, r26
 83a:	a0 2d       	mov	r26, r0
 83c:	0b 01       	movw	r0, r22
 83e:	b9 01       	movw	r22, r18
 840:	90 01       	movw	r18, r0
 842:	0c 01       	movw	r0, r24
 844:	ca 01       	movw	r24, r20
 846:	a0 01       	movw	r20, r0
 848:	11 24       	eor	r1, r1
 84a:	ff 27       	eor	r31, r31
 84c:	59 1b       	sub	r21, r25
 84e:	99 f0       	breq	.+38     	; 0x876 <__addsf3x+0x60>
 850:	59 3f       	cpi	r21, 0xF9	; 249
 852:	50 f4       	brcc	.+20     	; 0x868 <__addsf3x+0x52>
 854:	50 3e       	cpi	r21, 0xE0	; 224
 856:	68 f1       	brcs	.+90     	; 0x8b2 <__addsf3x+0x9c>
 858:	1a 16       	cp	r1, r26
 85a:	f0 40       	sbci	r31, 0x00	; 0
 85c:	a2 2f       	mov	r26, r18
 85e:	23 2f       	mov	r18, r19
 860:	34 2f       	mov	r19, r20
 862:	44 27       	eor	r20, r20
 864:	58 5f       	subi	r21, 0xF8	; 248
 866:	f3 cf       	rjmp	.-26     	; 0x84e <__addsf3x+0x38>
 868:	46 95       	lsr	r20
 86a:	37 95       	ror	r19
 86c:	27 95       	ror	r18
 86e:	a7 95       	ror	r26
 870:	f0 40       	sbci	r31, 0x00	; 0
 872:	53 95       	inc	r21
 874:	c9 f7       	brne	.-14     	; 0x868 <__addsf3x+0x52>
 876:	7e f4       	brtc	.+30     	; 0x896 <__addsf3x+0x80>
 878:	1f 16       	cp	r1, r31
 87a:	ba 0b       	sbc	r27, r26
 87c:	62 0b       	sbc	r22, r18
 87e:	73 0b       	sbc	r23, r19
 880:	84 0b       	sbc	r24, r20
 882:	ba f0       	brmi	.+46     	; 0x8b2 <__addsf3x+0x9c>
 884:	91 50       	subi	r25, 0x01	; 1
 886:	a1 f0       	breq	.+40     	; 0x8b0 <__addsf3x+0x9a>
 888:	ff 0f       	add	r31, r31
 88a:	bb 1f       	adc	r27, r27
 88c:	66 1f       	adc	r22, r22
 88e:	77 1f       	adc	r23, r23
 890:	88 1f       	adc	r24, r24
 892:	c2 f7       	brpl	.-16     	; 0x884 <__addsf3x+0x6e>
 894:	0e c0       	rjmp	.+28     	; 0x8b2 <__addsf3x+0x9c>
 896:	ba 0f       	add	r27, r26
 898:	62 1f       	adc	r22, r18
 89a:	73 1f       	adc	r23, r19
 89c:	84 1f       	adc	r24, r20
 89e:	48 f4       	brcc	.+18     	; 0x8b2 <__addsf3x+0x9c>
 8a0:	87 95       	ror	r24
 8a2:	77 95       	ror	r23
 8a4:	67 95       	ror	r22
 8a6:	b7 95       	ror	r27
 8a8:	f7 95       	ror	r31
 8aa:	9e 3f       	cpi	r25, 0xFE	; 254
 8ac:	08 f0       	brcs	.+2      	; 0x8b0 <__addsf3x+0x9a>
 8ae:	b0 cf       	rjmp	.-160    	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 8b0:	93 95       	inc	r25
 8b2:	88 0f       	add	r24, r24
 8b4:	08 f0       	brcs	.+2      	; 0x8b8 <__addsf3x+0xa2>
 8b6:	99 27       	eor	r25, r25
 8b8:	ee 0f       	add	r30, r30
 8ba:	97 95       	ror	r25
 8bc:	87 95       	ror	r24
 8be:	08 95       	ret

000008c0 <__cmpsf2>:
 8c0:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_cmp>
 8c4:	08 f4       	brcc	.+2      	; 0x8c8 <__cmpsf2+0x8>
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	08 95       	ret

000008ca <__divsf3>:
 8ca:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__divsf3x>
 8ce:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 8d2:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 8d6:	58 f0       	brcs	.+22     	; 0x8ee <__divsf3+0x24>
 8d8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 8dc:	40 f0       	brcs	.+16     	; 0x8ee <__divsf3+0x24>
 8de:	29 f4       	brne	.+10     	; 0x8ea <__divsf3+0x20>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	29 f0       	breq	.+10     	; 0x8ee <__divsf3+0x24>
 8e4:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 8e8:	51 11       	cpse	r21, r1
 8ea:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 8ee:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>

000008f2 <__divsf3x>:
 8f2:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 8f6:	68 f3       	brcs	.-38     	; 0x8d2 <__divsf3+0x8>

000008f8 <__divsf3_pse>:
 8f8:	99 23       	and	r25, r25
 8fa:	b1 f3       	breq	.-20     	; 0x8e8 <__divsf3+0x1e>
 8fc:	55 23       	and	r21, r21
 8fe:	91 f3       	breq	.-28     	; 0x8e4 <__divsf3+0x1a>
 900:	95 1b       	sub	r25, r21
 902:	55 0b       	sbc	r21, r21
 904:	bb 27       	eor	r27, r27
 906:	aa 27       	eor	r26, r26
 908:	62 17       	cp	r22, r18
 90a:	73 07       	cpc	r23, r19
 90c:	84 07       	cpc	r24, r20
 90e:	38 f0       	brcs	.+14     	; 0x91e <__stack+0x1f>
 910:	9f 5f       	subi	r25, 0xFF	; 255
 912:	5f 4f       	sbci	r21, 0xFF	; 255
 914:	22 0f       	add	r18, r18
 916:	33 1f       	adc	r19, r19
 918:	44 1f       	adc	r20, r20
 91a:	aa 1f       	adc	r26, r26
 91c:	a9 f3       	breq	.-22     	; 0x908 <__stack+0x9>
 91e:	35 d0       	rcall	.+106    	; 0x98a <__stack+0x8b>
 920:	0e 2e       	mov	r0, r30
 922:	3a f0       	brmi	.+14     	; 0x932 <__stack+0x33>
 924:	e0 e8       	ldi	r30, 0x80	; 128
 926:	32 d0       	rcall	.+100    	; 0x98c <__stack+0x8d>
 928:	91 50       	subi	r25, 0x01	; 1
 92a:	50 40       	sbci	r21, 0x00	; 0
 92c:	e6 95       	lsr	r30
 92e:	00 1c       	adc	r0, r0
 930:	ca f7       	brpl	.-14     	; 0x924 <__stack+0x25>
 932:	2b d0       	rcall	.+86     	; 0x98a <__stack+0x8b>
 934:	fe 2f       	mov	r31, r30
 936:	29 d0       	rcall	.+82     	; 0x98a <__stack+0x8b>
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	bb 1f       	adc	r27, r27
 940:	26 17       	cp	r18, r22
 942:	37 07       	cpc	r19, r23
 944:	48 07       	cpc	r20, r24
 946:	ab 07       	cpc	r26, r27
 948:	b0 e8       	ldi	r27, 0x80	; 128
 94a:	09 f0       	breq	.+2      	; 0x94e <__stack+0x4f>
 94c:	bb 0b       	sbc	r27, r27
 94e:	80 2d       	mov	r24, r0
 950:	bf 01       	movw	r22, r30
 952:	ff 27       	eor	r31, r31
 954:	93 58       	subi	r25, 0x83	; 131
 956:	5f 4f       	sbci	r21, 0xFF	; 255
 958:	3a f0       	brmi	.+14     	; 0x968 <__stack+0x69>
 95a:	9e 3f       	cpi	r25, 0xFE	; 254
 95c:	51 05       	cpc	r21, r1
 95e:	78 f0       	brcs	.+30     	; 0x97e <__stack+0x7f>
 960:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 964:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 968:	5f 3f       	cpi	r21, 0xFF	; 255
 96a:	e4 f3       	brlt	.-8      	; 0x964 <__stack+0x65>
 96c:	98 3e       	cpi	r25, 0xE8	; 232
 96e:	d4 f3       	brlt	.-12     	; 0x964 <__stack+0x65>
 970:	86 95       	lsr	r24
 972:	77 95       	ror	r23
 974:	67 95       	ror	r22
 976:	b7 95       	ror	r27
 978:	f7 95       	ror	r31
 97a:	9f 5f       	subi	r25, 0xFF	; 255
 97c:	c9 f7       	brne	.-14     	; 0x970 <__stack+0x71>
 97e:	88 0f       	add	r24, r24
 980:	91 1d       	adc	r25, r1
 982:	96 95       	lsr	r25
 984:	87 95       	ror	r24
 986:	97 f9       	bld	r25, 7
 988:	08 95       	ret
 98a:	e1 e0       	ldi	r30, 0x01	; 1
 98c:	66 0f       	add	r22, r22
 98e:	77 1f       	adc	r23, r23
 990:	88 1f       	adc	r24, r24
 992:	bb 1f       	adc	r27, r27
 994:	62 17       	cp	r22, r18
 996:	73 07       	cpc	r23, r19
 998:	84 07       	cpc	r24, r20
 99a:	ba 07       	cpc	r27, r26
 99c:	20 f0       	brcs	.+8      	; 0x9a6 <__stack+0xa7>
 99e:	62 1b       	sub	r22, r18
 9a0:	73 0b       	sbc	r23, r19
 9a2:	84 0b       	sbc	r24, r20
 9a4:	ba 0b       	sbc	r27, r26
 9a6:	ee 1f       	adc	r30, r30
 9a8:	88 f7       	brcc	.-30     	; 0x98c <__stack+0x8d>
 9aa:	e0 95       	com	r30
 9ac:	08 95       	ret

000009ae <__fixsfsi>:
 9ae:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fixunssfsi>
 9b2:	68 94       	set
 9b4:	b1 11       	cpse	r27, r1
 9b6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 9ba:	08 95       	ret

000009bc <__fixunssfsi>:
 9bc:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_splitA>
 9c0:	88 f0       	brcs	.+34     	; 0x9e4 <__fixunssfsi+0x28>
 9c2:	9f 57       	subi	r25, 0x7F	; 127
 9c4:	98 f0       	brcs	.+38     	; 0x9ec <__fixunssfsi+0x30>
 9c6:	b9 2f       	mov	r27, r25
 9c8:	99 27       	eor	r25, r25
 9ca:	b7 51       	subi	r27, 0x17	; 23
 9cc:	b0 f0       	brcs	.+44     	; 0x9fa <__fixunssfsi+0x3e>
 9ce:	e1 f0       	breq	.+56     	; 0xa08 <__fixunssfsi+0x4c>
 9d0:	66 0f       	add	r22, r22
 9d2:	77 1f       	adc	r23, r23
 9d4:	88 1f       	adc	r24, r24
 9d6:	99 1f       	adc	r25, r25
 9d8:	1a f0       	brmi	.+6      	; 0x9e0 <__fixunssfsi+0x24>
 9da:	ba 95       	dec	r27
 9dc:	c9 f7       	brne	.-14     	; 0x9d0 <__fixunssfsi+0x14>
 9de:	14 c0       	rjmp	.+40     	; 0xa08 <__fixunssfsi+0x4c>
 9e0:	b1 30       	cpi	r27, 0x01	; 1
 9e2:	91 f0       	breq	.+36     	; 0xa08 <__fixunssfsi+0x4c>
 9e4:	0e 94 10 06 	call	0xc20	; 0xc20 <__fp_zero>
 9e8:	b1 e0       	ldi	r27, 0x01	; 1
 9ea:	08 95       	ret
 9ec:	0c 94 10 06 	jmp	0xc20	; 0xc20 <__fp_zero>
 9f0:	67 2f       	mov	r22, r23
 9f2:	78 2f       	mov	r23, r24
 9f4:	88 27       	eor	r24, r24
 9f6:	b8 5f       	subi	r27, 0xF8	; 248
 9f8:	39 f0       	breq	.+14     	; 0xa08 <__fixunssfsi+0x4c>
 9fa:	b9 3f       	cpi	r27, 0xF9	; 249
 9fc:	cc f3       	brlt	.-14     	; 0x9f0 <__fixunssfsi+0x34>
 9fe:	86 95       	lsr	r24
 a00:	77 95       	ror	r23
 a02:	67 95       	ror	r22
 a04:	b3 95       	inc	r27
 a06:	d9 f7       	brne	.-10     	; 0x9fe <__fixunssfsi+0x42>
 a08:	3e f4       	brtc	.+14     	; 0xa18 <__fixunssfsi+0x5c>
 a0a:	90 95       	com	r25
 a0c:	80 95       	com	r24
 a0e:	70 95       	com	r23
 a10:	61 95       	neg	r22
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	8f 4f       	sbci	r24, 0xFF	; 255
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	08 95       	ret

00000a1a <__floatunsisf>:
 a1a:	e8 94       	clt
 a1c:	09 c0       	rjmp	.+18     	; 0xa30 <__floatsisf+0x12>

00000a1e <__floatsisf>:
 a1e:	97 fb       	bst	r25, 7
 a20:	3e f4       	brtc	.+14     	; 0xa30 <__floatsisf+0x12>
 a22:	90 95       	com	r25
 a24:	80 95       	com	r24
 a26:	70 95       	com	r23
 a28:	61 95       	neg	r22
 a2a:	7f 4f       	sbci	r23, 0xFF	; 255
 a2c:	8f 4f       	sbci	r24, 0xFF	; 255
 a2e:	9f 4f       	sbci	r25, 0xFF	; 255
 a30:	99 23       	and	r25, r25
 a32:	a9 f0       	breq	.+42     	; 0xa5e <__floatsisf+0x40>
 a34:	f9 2f       	mov	r31, r25
 a36:	96 e9       	ldi	r25, 0x96	; 150
 a38:	bb 27       	eor	r27, r27
 a3a:	93 95       	inc	r25
 a3c:	f6 95       	lsr	r31
 a3e:	87 95       	ror	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b7 95       	ror	r27
 a46:	f1 11       	cpse	r31, r1
 a48:	f8 cf       	rjmp	.-16     	; 0xa3a <__floatsisf+0x1c>
 a4a:	fa f4       	brpl	.+62     	; 0xa8a <__floatsisf+0x6c>
 a4c:	bb 0f       	add	r27, r27
 a4e:	11 f4       	brne	.+4      	; 0xa54 <__floatsisf+0x36>
 a50:	60 ff       	sbrs	r22, 0
 a52:	1b c0       	rjmp	.+54     	; 0xa8a <__floatsisf+0x6c>
 a54:	6f 5f       	subi	r22, 0xFF	; 255
 a56:	7f 4f       	sbci	r23, 0xFF	; 255
 a58:	8f 4f       	sbci	r24, 0xFF	; 255
 a5a:	9f 4f       	sbci	r25, 0xFF	; 255
 a5c:	16 c0       	rjmp	.+44     	; 0xa8a <__floatsisf+0x6c>
 a5e:	88 23       	and	r24, r24
 a60:	11 f0       	breq	.+4      	; 0xa66 <__floatsisf+0x48>
 a62:	96 e9       	ldi	r25, 0x96	; 150
 a64:	11 c0       	rjmp	.+34     	; 0xa88 <__floatsisf+0x6a>
 a66:	77 23       	and	r23, r23
 a68:	21 f0       	breq	.+8      	; 0xa72 <__floatsisf+0x54>
 a6a:	9e e8       	ldi	r25, 0x8E	; 142
 a6c:	87 2f       	mov	r24, r23
 a6e:	76 2f       	mov	r23, r22
 a70:	05 c0       	rjmp	.+10     	; 0xa7c <__floatsisf+0x5e>
 a72:	66 23       	and	r22, r22
 a74:	71 f0       	breq	.+28     	; 0xa92 <__floatsisf+0x74>
 a76:	96 e8       	ldi	r25, 0x86	; 134
 a78:	86 2f       	mov	r24, r22
 a7a:	70 e0       	ldi	r23, 0x00	; 0
 a7c:	60 e0       	ldi	r22, 0x00	; 0
 a7e:	2a f0       	brmi	.+10     	; 0xa8a <__floatsisf+0x6c>
 a80:	9a 95       	dec	r25
 a82:	66 0f       	add	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	88 1f       	adc	r24, r24
 a88:	da f7       	brpl	.-10     	; 0xa80 <__floatsisf+0x62>
 a8a:	88 0f       	add	r24, r24
 a8c:	96 95       	lsr	r25
 a8e:	87 95       	ror	r24
 a90:	97 f9       	bld	r25, 7
 a92:	08 95       	ret

00000a94 <floor>:
 a94:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__fp_trunc>
 a98:	90 f0       	brcs	.+36     	; 0xabe <floor+0x2a>
 a9a:	9f 37       	cpi	r25, 0x7F	; 127
 a9c:	48 f4       	brcc	.+18     	; 0xab0 <floor+0x1c>
 a9e:	91 11       	cpse	r25, r1
 aa0:	16 f0       	brts	.+4      	; 0xaa6 <floor+0x12>
 aa2:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 aa6:	60 e0       	ldi	r22, 0x00	; 0
 aa8:	70 e0       	ldi	r23, 0x00	; 0
 aaa:	80 e8       	ldi	r24, 0x80	; 128
 aac:	9f eb       	ldi	r25, 0xBF	; 191
 aae:	08 95       	ret
 ab0:	26 f4       	brtc	.+8      	; 0xaba <floor+0x26>
 ab2:	1b 16       	cp	r1, r27
 ab4:	61 1d       	adc	r22, r1
 ab6:	71 1d       	adc	r23, r1
 ab8:	81 1d       	adc	r24, r1
 aba:	0c 94 8b 05 	jmp	0xb16	; 0xb16 <__fp_mintl>
 abe:	0c 94 a6 05 	jmp	0xb4c	; 0xb4c <__fp_mpack>

00000ac2 <__fp_cmp>:
 ac2:	99 0f       	add	r25, r25
 ac4:	00 08       	sbc	r0, r0
 ac6:	55 0f       	add	r21, r21
 ac8:	aa 0b       	sbc	r26, r26
 aca:	e0 e8       	ldi	r30, 0x80	; 128
 acc:	fe ef       	ldi	r31, 0xFE	; 254
 ace:	16 16       	cp	r1, r22
 ad0:	17 06       	cpc	r1, r23
 ad2:	e8 07       	cpc	r30, r24
 ad4:	f9 07       	cpc	r31, r25
 ad6:	c0 f0       	brcs	.+48     	; 0xb08 <__fp_cmp+0x46>
 ad8:	12 16       	cp	r1, r18
 ada:	13 06       	cpc	r1, r19
 adc:	e4 07       	cpc	r30, r20
 ade:	f5 07       	cpc	r31, r21
 ae0:	98 f0       	brcs	.+38     	; 0xb08 <__fp_cmp+0x46>
 ae2:	62 1b       	sub	r22, r18
 ae4:	73 0b       	sbc	r23, r19
 ae6:	84 0b       	sbc	r24, r20
 ae8:	95 0b       	sbc	r25, r21
 aea:	39 f4       	brne	.+14     	; 0xafa <__fp_cmp+0x38>
 aec:	0a 26       	eor	r0, r26
 aee:	61 f0       	breq	.+24     	; 0xb08 <__fp_cmp+0x46>
 af0:	23 2b       	or	r18, r19
 af2:	24 2b       	or	r18, r20
 af4:	25 2b       	or	r18, r21
 af6:	21 f4       	brne	.+8      	; 0xb00 <__fp_cmp+0x3e>
 af8:	08 95       	ret
 afa:	0a 26       	eor	r0, r26
 afc:	09 f4       	brne	.+2      	; 0xb00 <__fp_cmp+0x3e>
 afe:	a1 40       	sbci	r26, 0x01	; 1
 b00:	a6 95       	lsr	r26
 b02:	8f ef       	ldi	r24, 0xFF	; 255
 b04:	81 1d       	adc	r24, r1
 b06:	81 1d       	adc	r24, r1
 b08:	08 95       	ret

00000b0a <__fp_inf>:
 b0a:	97 f9       	bld	r25, 7
 b0c:	9f 67       	ori	r25, 0x7F	; 127
 b0e:	80 e8       	ldi	r24, 0x80	; 128
 b10:	70 e0       	ldi	r23, 0x00	; 0
 b12:	60 e0       	ldi	r22, 0x00	; 0
 b14:	08 95       	ret

00000b16 <__fp_mintl>:
 b16:	88 23       	and	r24, r24
 b18:	71 f4       	brne	.+28     	; 0xb36 <__fp_mintl+0x20>
 b1a:	77 23       	and	r23, r23
 b1c:	21 f0       	breq	.+8      	; 0xb26 <__fp_mintl+0x10>
 b1e:	98 50       	subi	r25, 0x08	; 8
 b20:	87 2b       	or	r24, r23
 b22:	76 2f       	mov	r23, r22
 b24:	07 c0       	rjmp	.+14     	; 0xb34 <__fp_mintl+0x1e>
 b26:	66 23       	and	r22, r22
 b28:	11 f4       	brne	.+4      	; 0xb2e <__fp_mintl+0x18>
 b2a:	99 27       	eor	r25, r25
 b2c:	0d c0       	rjmp	.+26     	; 0xb48 <__fp_mintl+0x32>
 b2e:	90 51       	subi	r25, 0x10	; 16
 b30:	86 2b       	or	r24, r22
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	60 e0       	ldi	r22, 0x00	; 0
 b36:	2a f0       	brmi	.+10     	; 0xb42 <__fp_mintl+0x2c>
 b38:	9a 95       	dec	r25
 b3a:	66 0f       	add	r22, r22
 b3c:	77 1f       	adc	r23, r23
 b3e:	88 1f       	adc	r24, r24
 b40:	da f7       	brpl	.-10     	; 0xb38 <__fp_mintl+0x22>
 b42:	88 0f       	add	r24, r24
 b44:	96 95       	lsr	r25
 b46:	87 95       	ror	r24
 b48:	97 f9       	bld	r25, 7
 b4a:	08 95       	ret

00000b4c <__fp_mpack>:
 b4c:	9f 3f       	cpi	r25, 0xFF	; 255
 b4e:	31 f0       	breq	.+12     	; 0xb5c <__fp_mpack_finite+0xc>

00000b50 <__fp_mpack_finite>:
 b50:	91 50       	subi	r25, 0x01	; 1
 b52:	20 f4       	brcc	.+8      	; 0xb5c <__fp_mpack_finite+0xc>
 b54:	87 95       	ror	r24
 b56:	77 95       	ror	r23
 b58:	67 95       	ror	r22
 b5a:	b7 95       	ror	r27
 b5c:	88 0f       	add	r24, r24
 b5e:	91 1d       	adc	r25, r1
 b60:	96 95       	lsr	r25
 b62:	87 95       	ror	r24
 b64:	97 f9       	bld	r25, 7
 b66:	08 95       	ret

00000b68 <__fp_nan>:
 b68:	9f ef       	ldi	r25, 0xFF	; 255
 b6a:	80 ec       	ldi	r24, 0xC0	; 192
 b6c:	08 95       	ret

00000b6e <__fp_pscA>:
 b6e:	00 24       	eor	r0, r0
 b70:	0a 94       	dec	r0
 b72:	16 16       	cp	r1, r22
 b74:	17 06       	cpc	r1, r23
 b76:	18 06       	cpc	r1, r24
 b78:	09 06       	cpc	r0, r25
 b7a:	08 95       	ret

00000b7c <__fp_pscB>:
 b7c:	00 24       	eor	r0, r0
 b7e:	0a 94       	dec	r0
 b80:	12 16       	cp	r1, r18
 b82:	13 06       	cpc	r1, r19
 b84:	14 06       	cpc	r1, r20
 b86:	05 06       	cpc	r0, r21
 b88:	08 95       	ret

00000b8a <__fp_round>:
 b8a:	09 2e       	mov	r0, r25
 b8c:	03 94       	inc	r0
 b8e:	00 0c       	add	r0, r0
 b90:	11 f4       	brne	.+4      	; 0xb96 <__fp_round+0xc>
 b92:	88 23       	and	r24, r24
 b94:	52 f0       	brmi	.+20     	; 0xbaa <__fp_round+0x20>
 b96:	bb 0f       	add	r27, r27
 b98:	40 f4       	brcc	.+16     	; 0xbaa <__fp_round+0x20>
 b9a:	bf 2b       	or	r27, r31
 b9c:	11 f4       	brne	.+4      	; 0xba2 <__fp_round+0x18>
 b9e:	60 ff       	sbrs	r22, 0
 ba0:	04 c0       	rjmp	.+8      	; 0xbaa <__fp_round+0x20>
 ba2:	6f 5f       	subi	r22, 0xFF	; 255
 ba4:	7f 4f       	sbci	r23, 0xFF	; 255
 ba6:	8f 4f       	sbci	r24, 0xFF	; 255
 ba8:	9f 4f       	sbci	r25, 0xFF	; 255
 baa:	08 95       	ret

00000bac <__fp_split3>:
 bac:	57 fd       	sbrc	r21, 7
 bae:	90 58       	subi	r25, 0x80	; 128
 bb0:	44 0f       	add	r20, r20
 bb2:	55 1f       	adc	r21, r21
 bb4:	59 f0       	breq	.+22     	; 0xbcc <__fp_splitA+0x10>
 bb6:	5f 3f       	cpi	r21, 0xFF	; 255
 bb8:	71 f0       	breq	.+28     	; 0xbd6 <__fp_splitA+0x1a>
 bba:	47 95       	ror	r20

00000bbc <__fp_splitA>:
 bbc:	88 0f       	add	r24, r24
 bbe:	97 fb       	bst	r25, 7
 bc0:	99 1f       	adc	r25, r25
 bc2:	61 f0       	breq	.+24     	; 0xbdc <__fp_splitA+0x20>
 bc4:	9f 3f       	cpi	r25, 0xFF	; 255
 bc6:	79 f0       	breq	.+30     	; 0xbe6 <__fp_splitA+0x2a>
 bc8:	87 95       	ror	r24
 bca:	08 95       	ret
 bcc:	12 16       	cp	r1, r18
 bce:	13 06       	cpc	r1, r19
 bd0:	14 06       	cpc	r1, r20
 bd2:	55 1f       	adc	r21, r21
 bd4:	f2 cf       	rjmp	.-28     	; 0xbba <__fp_split3+0xe>
 bd6:	46 95       	lsr	r20
 bd8:	f1 df       	rcall	.-30     	; 0xbbc <__fp_splitA>
 bda:	08 c0       	rjmp	.+16     	; 0xbec <__fp_splitA+0x30>
 bdc:	16 16       	cp	r1, r22
 bde:	17 06       	cpc	r1, r23
 be0:	18 06       	cpc	r1, r24
 be2:	99 1f       	adc	r25, r25
 be4:	f1 cf       	rjmp	.-30     	; 0xbc8 <__fp_splitA+0xc>
 be6:	86 95       	lsr	r24
 be8:	71 05       	cpc	r23, r1
 bea:	61 05       	cpc	r22, r1
 bec:	08 94       	sec
 bee:	08 95       	ret

00000bf0 <__fp_trunc>:
 bf0:	0e 94 de 05 	call	0xbbc	; 0xbbc <__fp_splitA>
 bf4:	a0 f0       	brcs	.+40     	; 0xc1e <__fp_trunc+0x2e>
 bf6:	be e7       	ldi	r27, 0x7E	; 126
 bf8:	b9 17       	cp	r27, r25
 bfa:	88 f4       	brcc	.+34     	; 0xc1e <__fp_trunc+0x2e>
 bfc:	bb 27       	eor	r27, r27
 bfe:	9f 38       	cpi	r25, 0x8F	; 143
 c00:	60 f4       	brcc	.+24     	; 0xc1a <__fp_trunc+0x2a>
 c02:	16 16       	cp	r1, r22
 c04:	b1 1d       	adc	r27, r1
 c06:	67 2f       	mov	r22, r23
 c08:	78 2f       	mov	r23, r24
 c0a:	88 27       	eor	r24, r24
 c0c:	98 5f       	subi	r25, 0xF8	; 248
 c0e:	f7 cf       	rjmp	.-18     	; 0xbfe <__fp_trunc+0xe>
 c10:	86 95       	lsr	r24
 c12:	77 95       	ror	r23
 c14:	67 95       	ror	r22
 c16:	b1 1d       	adc	r27, r1
 c18:	93 95       	inc	r25
 c1a:	96 39       	cpi	r25, 0x96	; 150
 c1c:	c8 f3       	brcs	.-14     	; 0xc10 <__fp_trunc+0x20>
 c1e:	08 95       	ret

00000c20 <__fp_zero>:
 c20:	e8 94       	clt

00000c22 <__fp_szero>:
 c22:	bb 27       	eor	r27, r27
 c24:	66 27       	eor	r22, r22
 c26:	77 27       	eor	r23, r23
 c28:	cb 01       	movw	r24, r22
 c2a:	97 f9       	bld	r25, 7
 c2c:	08 95       	ret

00000c2e <__gesf2>:
 c2e:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_cmp>
 c32:	08 f4       	brcc	.+2      	; 0xc36 <__gesf2+0x8>
 c34:	8f ef       	ldi	r24, 0xFF	; 255
 c36:	08 95       	ret

00000c38 <__mulsf3>:
 c38:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__mulsf3x>
 c3c:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__fp_round>
 c40:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__fp_pscA>
 c44:	38 f0       	brcs	.+14     	; 0xc54 <__mulsf3+0x1c>
 c46:	0e 94 be 05 	call	0xb7c	; 0xb7c <__fp_pscB>
 c4a:	20 f0       	brcs	.+8      	; 0xc54 <__mulsf3+0x1c>
 c4c:	95 23       	and	r25, r21
 c4e:	11 f0       	breq	.+4      	; 0xc54 <__mulsf3+0x1c>
 c50:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 c54:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__fp_nan>
 c58:	11 24       	eor	r1, r1
 c5a:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>

00000c5e <__mulsf3x>:
 c5e:	0e 94 d6 05 	call	0xbac	; 0xbac <__fp_split3>
 c62:	70 f3       	brcs	.-36     	; 0xc40 <__mulsf3+0x8>

00000c64 <__mulsf3_pse>:
 c64:	95 9f       	mul	r25, r21
 c66:	c1 f3       	breq	.-16     	; 0xc58 <__mulsf3+0x20>
 c68:	95 0f       	add	r25, r21
 c6a:	50 e0       	ldi	r21, 0x00	; 0
 c6c:	55 1f       	adc	r21, r21
 c6e:	62 9f       	mul	r22, r18
 c70:	f0 01       	movw	r30, r0
 c72:	72 9f       	mul	r23, r18
 c74:	bb 27       	eor	r27, r27
 c76:	f0 0d       	add	r31, r0
 c78:	b1 1d       	adc	r27, r1
 c7a:	63 9f       	mul	r22, r19
 c7c:	aa 27       	eor	r26, r26
 c7e:	f0 0d       	add	r31, r0
 c80:	b1 1d       	adc	r27, r1
 c82:	aa 1f       	adc	r26, r26
 c84:	64 9f       	mul	r22, r20
 c86:	66 27       	eor	r22, r22
 c88:	b0 0d       	add	r27, r0
 c8a:	a1 1d       	adc	r26, r1
 c8c:	66 1f       	adc	r22, r22
 c8e:	82 9f       	mul	r24, r18
 c90:	22 27       	eor	r18, r18
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	62 1f       	adc	r22, r18
 c98:	73 9f       	mul	r23, r19
 c9a:	b0 0d       	add	r27, r0
 c9c:	a1 1d       	adc	r26, r1
 c9e:	62 1f       	adc	r22, r18
 ca0:	83 9f       	mul	r24, r19
 ca2:	a0 0d       	add	r26, r0
 ca4:	61 1d       	adc	r22, r1
 ca6:	22 1f       	adc	r18, r18
 ca8:	74 9f       	mul	r23, r20
 caa:	33 27       	eor	r19, r19
 cac:	a0 0d       	add	r26, r0
 cae:	61 1d       	adc	r22, r1
 cb0:	23 1f       	adc	r18, r19
 cb2:	84 9f       	mul	r24, r20
 cb4:	60 0d       	add	r22, r0
 cb6:	21 1d       	adc	r18, r1
 cb8:	82 2f       	mov	r24, r18
 cba:	76 2f       	mov	r23, r22
 cbc:	6a 2f       	mov	r22, r26
 cbe:	11 24       	eor	r1, r1
 cc0:	9f 57       	subi	r25, 0x7F	; 127
 cc2:	50 40       	sbci	r21, 0x00	; 0
 cc4:	9a f0       	brmi	.+38     	; 0xcec <__mulsf3_pse+0x88>
 cc6:	f1 f0       	breq	.+60     	; 0xd04 <__mulsf3_pse+0xa0>
 cc8:	88 23       	and	r24, r24
 cca:	4a f0       	brmi	.+18     	; 0xcde <__mulsf3_pse+0x7a>
 ccc:	ee 0f       	add	r30, r30
 cce:	ff 1f       	adc	r31, r31
 cd0:	bb 1f       	adc	r27, r27
 cd2:	66 1f       	adc	r22, r22
 cd4:	77 1f       	adc	r23, r23
 cd6:	88 1f       	adc	r24, r24
 cd8:	91 50       	subi	r25, 0x01	; 1
 cda:	50 40       	sbci	r21, 0x00	; 0
 cdc:	a9 f7       	brne	.-22     	; 0xcc8 <__mulsf3_pse+0x64>
 cde:	9e 3f       	cpi	r25, 0xFE	; 254
 ce0:	51 05       	cpc	r21, r1
 ce2:	80 f0       	brcs	.+32     	; 0xd04 <__mulsf3_pse+0xa0>
 ce4:	0c 94 85 05 	jmp	0xb0a	; 0xb0a <__fp_inf>
 ce8:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_szero>
 cec:	5f 3f       	cpi	r21, 0xFF	; 255
 cee:	e4 f3       	brlt	.-8      	; 0xce8 <__mulsf3_pse+0x84>
 cf0:	98 3e       	cpi	r25, 0xE8	; 232
 cf2:	d4 f3       	brlt	.-12     	; 0xce8 <__mulsf3_pse+0x84>
 cf4:	86 95       	lsr	r24
 cf6:	77 95       	ror	r23
 cf8:	67 95       	ror	r22
 cfa:	b7 95       	ror	r27
 cfc:	f7 95       	ror	r31
 cfe:	e7 95       	ror	r30
 d00:	9f 5f       	subi	r25, 0xFF	; 255
 d02:	c1 f7       	brne	.-16     	; 0xcf4 <__mulsf3_pse+0x90>
 d04:	fe 2b       	or	r31, r30
 d06:	88 0f       	add	r24, r24
 d08:	91 1d       	adc	r25, r1
 d0a:	96 95       	lsr	r25
 d0c:	87 95       	ror	r24
 d0e:	97 f9       	bld	r25, 7
 d10:	08 95       	ret

00000d12 <__itoa_ncheck>:
 d12:	bb 27       	eor	r27, r27
 d14:	4a 30       	cpi	r20, 0x0A	; 10
 d16:	31 f4       	brne	.+12     	; 0xd24 <__itoa_ncheck+0x12>
 d18:	99 23       	and	r25, r25
 d1a:	22 f4       	brpl	.+8      	; 0xd24 <__itoa_ncheck+0x12>
 d1c:	bd e2       	ldi	r27, 0x2D	; 45
 d1e:	90 95       	com	r25
 d20:	81 95       	neg	r24
 d22:	9f 4f       	sbci	r25, 0xFF	; 255
 d24:	0c 94 95 06 	jmp	0xd2a	; 0xd2a <__utoa_common>

00000d28 <__utoa_ncheck>:
 d28:	bb 27       	eor	r27, r27

00000d2a <__utoa_common>:
 d2a:	fb 01       	movw	r30, r22
 d2c:	55 27       	eor	r21, r21
 d2e:	aa 27       	eor	r26, r26
 d30:	88 0f       	add	r24, r24
 d32:	99 1f       	adc	r25, r25
 d34:	aa 1f       	adc	r26, r26
 d36:	a4 17       	cp	r26, r20
 d38:	10 f0       	brcs	.+4      	; 0xd3e <__utoa_common+0x14>
 d3a:	a4 1b       	sub	r26, r20
 d3c:	83 95       	inc	r24
 d3e:	50 51       	subi	r21, 0x10	; 16
 d40:	b9 f7       	brne	.-18     	; 0xd30 <__utoa_common+0x6>
 d42:	a0 5d       	subi	r26, 0xD0	; 208
 d44:	aa 33       	cpi	r26, 0x3A	; 58
 d46:	08 f0       	brcs	.+2      	; 0xd4a <__utoa_common+0x20>
 d48:	a9 5d       	subi	r26, 0xD9	; 217
 d4a:	a1 93       	st	Z+, r26
 d4c:	00 97       	sbiw	r24, 0x00	; 0
 d4e:	79 f7       	brne	.-34     	; 0xd2e <__utoa_common+0x4>
 d50:	b1 11       	cpse	r27, r1
 d52:	b1 93       	st	Z+, r27
 d54:	11 92       	st	Z+, r1
 d56:	cb 01       	movw	r24, r22
 d58:	0c 94 ae 06 	jmp	0xd5c	; 0xd5c <strrev>

00000d5c <strrev>:
 d5c:	dc 01       	movw	r26, r24
 d5e:	fc 01       	movw	r30, r24
 d60:	67 2f       	mov	r22, r23
 d62:	71 91       	ld	r23, Z+
 d64:	77 23       	and	r23, r23
 d66:	e1 f7       	brne	.-8      	; 0xd60 <strrev+0x4>
 d68:	32 97       	sbiw	r30, 0x02	; 2
 d6a:	04 c0       	rjmp	.+8      	; 0xd74 <strrev+0x18>
 d6c:	7c 91       	ld	r23, X
 d6e:	6d 93       	st	X+, r22
 d70:	70 83       	st	Z, r23
 d72:	62 91       	ld	r22, -Z
 d74:	ae 17       	cp	r26, r30
 d76:	bf 07       	cpc	r27, r31
 d78:	c8 f3       	brcs	.-14     	; 0xd6c <strrev+0x10>
 d7a:	08 95       	ret

00000d7c <_exit>:
 d7c:	f8 94       	cli

00000d7e <__stop_program>:
 d7e:	ff cf       	rjmp	.-2      	; 0xd7e <__stop_program>
